import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'custom.dart';
import 'encryption_controller.dart'; // üëà file b·∫°n ƒë√£ vi·∫øt CryptoModule

class CryptoScreen extends StatefulWidget {
  const CryptoScreen({super.key});

  @override
  State<CryptoScreen> createState() => _CryptoScreenState();
}

class _CryptoScreenState extends State<CryptoScreen> {
  String _selected = "AES";
  String _result = "";

  final TextEditingController _inputController = TextEditingController();
  final TextEditingController _keyController = TextEditingController();
  final TextEditingController _ivController = TextEditingController();
  final TextEditingController _publicKeyController = TextEditingController();
  final TextEditingController _privateKeyController = TextEditingController();

  final Map<String, Map<String, String>> _info = {
    "AES": {
      "id": "AES",
      "title": "AES",
      "encrypt": "B·∫°n nh·∫≠p m·ªôt ƒëo·∫°n ch·ªØ (ho·∫∑c d·ªØ li·ªáu) v√† nh·∫≠p th√™m m·ªôt 'm·∫≠t kh·∫©u b√≠ m·∫≠t' + 'chu·ªói m·ªü kh√≥a' (IV). H·ªá th·ªëng s·∫Ω tr·ªôn ch√∫ng l·∫°i ƒë·ªÉ t·∫°o ra ƒëo·∫°n ch·ªØ m·ªõi ƒë√£ b·ªã m√£ h√≥a.",
      "decrypt": "ƒê·ªÉ gi·∫£i m√£, b·∫°n ph·∫£i nh·∫≠p l·∫°i ƒë√∫ng 'm·∫≠t kh·∫©u b√≠ m·∫≠t' v√† 'chu·ªói m·ªü kh√≥a' gi·ªëng nh∆∞ l√∫c m√£ h√≥a. N·∫øu sai th√¨ s·∫Ω kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c.",
      "usage": "Th∆∞·ªùng d√πng ƒë·ªÉ gi·ªØ an to√†n cho d·ªØ li·ªáu, v√≠ d·ª• l∆∞u tr·ªØ th√¥ng tin c√° nh√¢n ho·∫∑c g·ª≠i tin nh·∫Øn.",
    },
    "RSA": {
      "id": "RSA",
      "title": "RSA",
      "encrypt": "B·∫°n nh·∫≠p m·ªôt ƒëo·∫°n ch·ªØ, h·ªá th·ªëng s·∫Ω d√πng 'ch√¨a kh√≥a c√¥ng khai' ƒë·ªÉ kh√≥a (m√£ h√≥a) ƒëo·∫°n ch·ªØ ƒë√≥. Ng∆∞·ªùi kh√°c c√≥ th·ªÉ g·ª≠i cho b·∫°n b·∫£n ƒë√£ m√£ h√≥a.",
      "decrypt": "B·∫°n d√πng 'ch√¨a kh√≥a b√≠ m·∫≠t' c·ªßa ri√™ng b·∫°n ƒë·ªÉ m·ªü kh√≥a (gi·∫£i m√£). Ch·ªâ b·∫°n m·ªõi c√≥ ch√¨a kh√≥a n√†y.",
      "usage": "Th∆∞·ªùng d√πng khi c·∫ßn g·ª≠i d·ªØ li·ªáu an to√†n cho m·ªôt ng∆∞·ªùi c·ª• th·ªÉ, ho·∫∑c ƒë·ªÉ k√Ω x√°c nh·∫≠n d·ªØ li·ªáu.",
    },
    "Hash": {
      "id": "Hash",
      "title": "Hash (SHA-256)",
      "encrypt": "B·∫°n nh·∫≠p m·ªôt ƒëo·∫°n ch·ªØ, h·ªá th·ªëng s·∫Ω t·∫°o ra m·ªôt chu·ªói m√£ c·ªë ƒë·ªãnh (g·ªçi l√† d·∫•u v√¢n tay k·ªπ thu·∫≠t s·ªë). Chu·ªói n√†y kh√¥ng th·ªÉ ƒë·ªïi ng∆∞·ª£c l·∫°i th√†nh ch·ªØ ban ƒë·∫ßu.",
      "decrypt": "Kh√¥ng th·ªÉ gi·∫£i m√£ ƒë∆∞·ª£c. ƒê√¢y ch·ªâ l√† m·ªôt c√°ch ƒë·ªÉ t·∫°o ra m√£ nh·∫≠n d·∫°ng duy nh·∫•t cho d·ªØ li·ªáu.",
      "usage": "Th∆∞·ªùng d√πng ƒë·ªÉ ki·ªÉm tra xem d·ªØ li·ªáu c√≥ b·ªã thay ƒë·ªïi hay kh√¥ng (v√≠ d·ª• ki·ªÉm tra m·∫≠t kh·∫©u, ki·ªÉm tra file t·∫£i v·ªÅ).",
    },
    "CUSTOM": {
      "id": "CUSTOM",
      "title": "T·ª± ƒë·ªãnh nghƒ©a",
      "encrypt": "B·∫°n t·ª± ƒë·ªãnh nghƒ©a ra 1 b·∫£ng m√£ h√≥a [ƒê∆°n gi·∫£n ch·ªâ l√† thay th·∫ø k√Ω t·ª±: VD: A -> !!!]",
      "decrypt": "S·∫Ω s·ª≠ d·ª•ng ch√≠nh b·∫£ng m√£ h√≥a do b·∫°n ƒë·ªãnh nghƒ©a",
      "usage": "T√πy √Ω ch√≠ c·ªßa b·∫°n.",
    },
  };

  void _encrypt() async {
    final text = _inputController.text;
    if (text.isEmpty) return;

    String res = "";
    try {
      if (_selected == "AES") {
        res = CryptoModule.aesEncrypt(
          text,
          _keyController.text,
          _ivController.text,
        );
      } else if (_selected == "RSA") {
        res = CryptoModule.rsaEncrypt(
          text,
          _publicKeyController.text,
        );
      } else if (_selected == "Hash") {
        res = CryptoModule.sha256(text);
      } else if(_selected == "CUSTOM"){
        res = "ƒêang x·ª≠ l√Ω ...";
        final rs = await CryptoModule.encode(text);
        res = rs;
      }
    } catch (e) {
      res = "L·ªói: $e";
    }

    setState(() {
      _result = res;
    });
  }

  void _decrypt() async {
    final text = _inputController.text;
    if (text.isEmpty) return;

    String res = "";
    try {
      if (_selected == "AES") {
        res = CryptoModule.aesDecrypt(
          text,
          _keyController.text,
          _ivController.text,
        );
      } else if (_selected == "RSA") {
        res = CryptoModule.rsaDecrypt(
          text,
          _privateKeyController.text,
        );
      }else if(_selected == "CUSTOM"){
        res = "ƒêang x·ª≠ l√Ω ...";
        final rs = await CryptoModule.decode(text);
        res = rs;
      }
      else {
        res = "Thu·∫≠t to√°n n√†y kh√¥ng c√≥ gi·∫£i m√£.";
      }
    } catch (e) {
      res = "L·ªói: $e";
    }

    setState(() {
      _result = res;
    });
  }

  @override
  Widget build(BuildContext context) {
    final data = _info[_selected]!;

    return Scaffold(
      appBar: AppBar(title: const Text("M√£ h√≥a v√† gi·∫£i m√£")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            // Ch·ªçn thu·∫≠t to√°n
            const Text(
              "Ch·ªçn thu·∫≠t to√°n:",
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            _buildSelect(),

            const SizedBox(height: 20),
            // √î nh·∫≠p li·ªáu
            TextField(
              controller: _inputController,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                labelText: "Nh·∫≠p d·ªØ li·ªáu",
              ),
            ),
            const SizedBox(height: 10),

            if (_selected == "AES") ...[
              TextField(
                controller: _keyController,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: "M·∫≠t kh·∫©u b√≠ m·∫≠t (key)",
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: _ivController,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: "Chu·ªói m·ªü kh√≥a (IV)",
                ),
              ),
            ],
            if (_selected == "RSA") ...[
              TextField(
                controller: _publicKeyController,
                maxLines: 3,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: "Public Key (d√πng ƒë·ªÉ m√£ h√≥a)",
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: _privateKeyController,
                maxLines: 3,
                decoration: const InputDecoration(
                  border: OutlineInputBorder(),
                  labelText: "Private Key (d√πng ƒë·ªÉ gi·∫£i m√£)",
                ),
              ),
            ],
            if(_selected == "CUSTOM")...[
              Center(
                child: ElevatedButton(
                  onPressed: () async {
                    final result = await showDialog(
                      context: context,
                      builder: (_) => const CustomMappingDialog(),
                    );
                  },
                  child: const Text("Ch·ªânh s·ª≠a b·∫£ng thay th·∫ø"),
                ),
              )
            ],

            const SizedBox(height: 20),
            // K·∫øt qu·∫£
            if (_result.isNotEmpty) ...[
              const Text("K·∫øt qu·∫£:", style: TextStyle(fontWeight: FontWeight.bold)),
              Container(
                padding: const EdgeInsets.all(12),
                margin: const EdgeInsets.only(top: 5, bottom: 10),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey.shade400),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Expanded(child: SelectableText(_result)),
                    IconButton(
                      icon: const Icon(Icons.copy),
                      onPressed: () {
                        Clipboard.setData(ClipboardData(text: _result));
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text("ƒê√£ sao ch√©p k·∫øt qu·∫£")),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ],

            const SizedBox(height: 10),
            Text(
              data["title"]!,
              style: const TextStyle(
                  fontSize: 16, fontWeight: FontWeight.bold, color: Colors.blue),
            ),
            Text("üîí M√£ h√≥a: ${data["encrypt"]}"),
            Text("üîë Gi·∫£i m√£: ${data["decrypt"]}"),
            Text("üìå ·ª®ng d·ª•ng: ${data["usage"]}"),
            const Divider(height: 30),
            // N√∫t h√†nh ƒë·ªông
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: _encrypt,
                  child: const Text("M√£ h√≥a"),
                ),
                ElevatedButton(
                  onPressed: _decrypt,
                  child: const Text("Gi·∫£i m√£"),
                ),
              ],
            )
          ],
        ),
      ),
    );
  }

  Widget _buildSelect(){
    return Wrap(
      children: [
        ..._info.entries.map((inf){
          return _buildOption(inf.value);
        })
      ],
    );
  }
  Widget _buildOption(Map<String, String> data) {
    final isSelected = _selected == data['id'];
    return GestureDetector(
      onTap: () => setState(() => _selected = data['id']!),
      child: Card(
        color: isSelected ? Colors.blue.shade100 : Colors.white,
        elevation: isSelected ? 4 : 1,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
          side: BorderSide(color: isSelected ? Colors.blue : Colors.grey),
        ),
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(data['id']!, style: TextStyle(color: isSelected ? Colors.blue : Colors.grey)),
            ],
          ),
        ),
      ),
    );
  }

}
